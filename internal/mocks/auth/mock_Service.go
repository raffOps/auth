// Code generated by mockery v2.42.1. DO NOT EDIT.

package auth

import (
	context "context"

	errs "github.com/raffops/chat/pkg/errs"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, username, email
func (_m *Service) Login(ctx context.Context, username string, email string) (string, errs.ChatError) {
	ret := _m.Called(ctx, username, email)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, errs.ChatError)); ok {
		return rf(ctx, username, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) errs.ChatError); ok {
		r1 = rf(ctx, username, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// Service_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Service_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - email string
func (_e *Service_Expecter) Login(ctx interface{}, username interface{}, email interface{}) *Service_Login_Call {
	return &Service_Login_Call{Call: _e.mock.On("Login", ctx, username, email)}
}

func (_c *Service_Login_Call) Run(run func(ctx context.Context, username string, email string)) *Service_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_Login_Call) Return(_a0 string, _a1 errs.ChatError) *Service_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, errs.ChatError)) *Service_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, username, email, authType, role
func (_m *Service) SignUp(ctx context.Context, username string, email string, authType string, role string) (string, errs.ChatError) {
	ret := _m.Called(ctx, username, email, authType, role)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 string
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (string, errs.ChatError)); ok {
		return rf(ctx, username, email, authType, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) string); ok {
		r0 = rf(ctx, username, email, authType, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) errs.ChatError); ok {
		r1 = rf(ctx, username, email, authType, role)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// Service_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type Service_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - email string
//   - authType string
//   - role string
func (_e *Service_Expecter) SignUp(ctx interface{}, username interface{}, email interface{}, authType interface{}, role interface{}) *Service_SignUp_Call {
	return &Service_SignUp_Call{Call: _e.mock.On("SignUp", ctx, username, email, authType, role)}
}

func (_c *Service_SignUp_Call) Run(run func(ctx context.Context, username string, email string, authType string, role string)) *Service_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *Service_SignUp_Call) Return(_a0 string, _a1 errs.ChatError) *Service_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_SignUp_Call) RunAndReturn(run func(context.Context, string, string, string, string) (string, errs.ChatError)) *Service_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
